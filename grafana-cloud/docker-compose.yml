# reference: https://github.dev/stefanprodan/dockprom
version: "3.7"

networks:
  monitoring:


volumes:
  # alertmanager_data: {}
  grafana_data: {}
  prometheus_data: {}

services:
  # nodeexporter:
  #   #image: prom/node-exporter:v1.3.1
  #   image: prom/node-exporter
  #   container_name: nodeexporter
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   restart: unless-stopped
  #   expose:
  #     - 9100
  #   networks:
  #     - monitoring
  #   labels:
  #     org.musicash.monitoring: "nodeexporter"
  #     org.musicash.context: "monitoring"
  #     org.musicash.monitoring.type: "exporter"

  # prometheus:
  #   #image: prom/prometheus:v2.36.1
  #   image: prom/prometheus
  #   container_name: prometheus
  #   # depends_on:
  #   #   - nodeexporter
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prometheus_data:/prometheus
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #     - '--web.enable-admin-api'
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - monitoring
  #   labels:
  #     org.musicash.monitoring: "prometheus"
  #     org.musicash.monitoring.type: "database"
  #     org.musicash.context: "monitoring"

  grafana-agent:
    image: grafana/agent:v0.35.3
    volumes:
      - ./grafana-agent/agent.yaml:/etc/agent.yaml
    restart_policy:
      condition: on-failure
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        org.musicash.monitoring: "grafana-agent"
        org.musicash.context: "monitoring"
        org.musicash.monitoring.type: "agent"
    networks:
      - monitoring

  # alertmanager:
  #   image: prom/alertmanager
  #   container_name: alertmanager
  #   depends_on:
  #     - prometheus
  #   volumes:
  #     - ./alertmanager:/etc/alertmanager/:ro
  #     - alertmanager_data:/alertmanager
  #   restart: unless-stopped
  #   ports:
  #     - 9093:9093
  #   command:
  #     - --config.file=/etc/alertmanager/alertmanager.yml
  #   networks:
  #     - monitoring
  #   labels:
  #     org.musicash.monitoring: "alertmanager"
  #     org.musicash.monitoring.type: "database"
  #     org.musicash.context: "monitoring"

  grafana:
    #image: grafana/grafana:9.2.2
    image: grafana/grafana
    container_name: grafana
    # depends_on:
    #   - alertmanager
    user: "$UID:$GID"
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "8000:3000"
    environment:
      - GF_DEFAULT_INSTANCE_NAME=Monitoring
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin@123
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_BASIC_ENABLED=true
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_ENABLE_GZIP=true
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/configs/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./grafana/configs/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    labels:
      org.musicash.monitoring: "grafana"
      org.musicash.context: "monitoring"
      org.musicash.monitoring.type: "dashboard"
